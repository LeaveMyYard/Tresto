"""Non-interactive test for `tresto test create` right after `tresto init`.

We patch Prompt.ask to feed defaults/inputs and stub the AI agent to avoid
network calls, ensuring the command scaffolds a test file successfully.
"""

from __future__ import annotations

import sys
from pathlib import Path
from typing import Any
from unittest.mock import patch

import tresto.commands.init as init_mod
import tresto.commands.test.create as create_mod


class _DummyAgent:
    def __init__(self, *_args: Any, **_kwargs: Any) -> None:
        pass

    async def init(self) -> None:  # noqa: D401
        return None

    async def run(self) -> None:  # noqa: D401
        return None


def test_tresto_test_create_scaffolds_file_after_init(tmp_path: Path, monkeypatch: Any) -> None:
    """Run `tresto init` then `tresto test create` non-interactively and verify outputs."""

    # Run inside a clean temp cwd
    monkeypatch.chdir(tmp_path)

    # Import sources without installation
    project_root: Path = Path(__file__).resolve().parents[2]
    sys.path.insert(0, str(project_root / "src"))

    # Answer defaults for init, and provide values for prompts without defaults
    def _answer_prompt(
        message: str,
        *,
        default: str | None = None,
        choices: list[str] | None = None,  # noqa: ARG001
    ) -> str:
        if default is not None:
            return default
        if "Describe" in message:
            return "Simple smoke test description"
        if "Enter the test name" in message:
            return "web.login"
        return "ok"

    with (
        patch("rich.prompt.Prompt.ask", side_effect=_answer_prompt),
        patch("tresto.core.runner.LangGraphTestAgent", _DummyAgent),
    ):
        # Initialize project config and boilerplate
        init_mod.init_command(force=True)

        # Create a test scaffold (avoid interactive test name by passing it)
        create_mod.create_test_command(test_name="web.login")

    # Test file is created with Tresto header
    test_file = tmp_path / "tresto" / "tests" / "web" / "test_login.py"
    assert test_file.exists(), "Test file was not created"

    content = test_file.read_text(encoding="utf-8")
    assert "Generated by Tresto v" in content
    assert "Test name: web.login" in content
    assert "Test description: Simple smoke test description" in content
